require('nez').realize 'Coffee', (Coffee, test, it, should) -> 

    it 'displays coffee-script coffee script compile error', (done, fs) ->

        fs.readFileSync = -> 

            return """ 

                require 'milk'
                require 'sugar'
                require mug'
                require 'teaspoon'
                require 'kettle'

            """

        Coffee.compile {},

            src: '/path/to/repo/src'
            dst: '/path/to/repo/lib'
            file: '/path/to/repo/src/dir/file.coffee', (error) -> 

                should.exist error
                test done

    it 'compiles coffee-script', (done, fs, wrench) -> 

        fs.readFileSync = -> 

            return """ 

                => 

            """

        madeDir = false
        wrench.mkdirSyncRecursive = (path) ->

            path.should.equal '/path/to/repo/lib/dir'
            madeDir = true

        fs.writeFileSync = (file, content) ->

            file.should.equal '/path/to/repo/lib/dir/file.js'
            content.should.equal '// Generated by CoffeeScript 1.6.2\nvar _this = this;\n\n(function() {});\n'
            madeDir.should.equal true
            test done

        Coffee.compile {},

            src: '/path/to/repo/src'
            dst: '/path/to/repo/lib'
            file: '/path/to/repo/src/dir/file.coffee', (error) -> 

    it 'callsback js if no dst is provided', (done, fs) -> 

        fs.readFileSync = -> 
            return """ 
                => 
            """

        Coffee.compile {}, { 

            file: '/path/to/repo/src/dir/file.coffee'
            src: '/path/to/repo/src/'

        }, (error, js) -> 

            js.should.match /Generated by CoffeeScript/
            test done


    it 'generates a default spec file after compile (if missing)', (done, fs, wrench) ->

        madeDir = false
        wrench.mkdirSyncRecursive = (path) ->

            path.should.equal '/path/to/repo/spec/dir'
            madeDir = true

        madeSpec = false
        fs.writeFileSync = (file, content) ->

            file.should.equal '/path/to/repo/spec/dir/class_name_spec.coffee'
            content.should.match /require\('nez'\)\.realize/
            madeSpec = true

        Coffee.ensureSpec {},

            src: '/path/to/repo/src'
            spec: '/path/to/repo/spec'
            file: '/path/to/repo/src/dir/class_name.coffee', (error, specFile) -> 

                should.not.exist specFile
                madeDir.should.equal true
                madeSpec.should.equal true
                test done


    it 'calls back with existing specfile if not created', (done, fs, wrench) -> 

        fs.lstatSync = -> 'does not throw'
        wrench.mkdirSyncRecursive = -> throw 'THIS SHOULD NOT BE CALLED'

        Coffee.ensureSpec {},

            src: '/path/to/repo/src'
            spec: '/path/to/repo/spec'
            file: '/path/to/repo/src/dir/class_name.coffee', (error, specFile) -> 

                specFile.should.equal '/path/to/repo/spec/dir/class_name_spec.coffee'
                test done



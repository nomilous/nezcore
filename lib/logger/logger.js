// Generated by CoffeeScript 1.4.0
var Logger, levels, logger, winston;

winston = require('winston');

logger = void 0;

levels = {
  silly: false,
  verbose: false,
  info: false,
  warn: false,
  debug: false,
  error: true
};

module.exports = Logger = (function() {

  function Logger(opts) {
    var transports;
    if (opts == null) {
      opts = {};
    }
    this.levels = levels;
    transports = [];
    if (typeof opts.console !== 'undefined') {
      this.loadLevels(opts.console.level);
      transports.push(new winston.transports.Console({
        level: opts.console.level,
        colorize: opts.console.colorize
      }));
    }
    if (typeof opts.file !== 'undefined') {
      this.loadLevels(opts.file.level);
      transports.push(new winston.transports.File({
        filename: opts.file.filename,
        level: opts.file.level
      }));
    }
    logger = this.logger = new winston.Logger({
      transports: transports
    });
  }

  Logger.prototype.silly = function() {
    if (!levels.silly) {
      return;
    }
    return logger.silly.apply(null, this.process(arguments));
  };

  Logger.prototype.verbose = function() {
    if (!levels.verbose) {
      return;
    }
    return logger.verbose.apply(null, this.process(arguments));
  };

  Logger.prototype.info = function() {
    if (!levels.info) {
      return;
    }
    return logger.info.apply(null, this.process(arguments));
  };

  Logger.prototype.warn = function() {
    if (!levels.warn) {
      return;
    }
    return logger.warn.apply(null, this.process(arguments));
  };

  Logger.prototype.debug = function() {
    if (!levels.debug) {
      return;
    }
    return logger.debug.apply(null, this.process(arguments));
  };

  Logger.prototype.error = function() {
    if (!levels.error) {
      return;
    }
    return logger.error.apply(null, this.process(arguments));
  };

  Logger.prototype.log = function(messages) {
    var level, _results;
    if (typeof messages === 'string') {
      return logger.log.apply(null, arguments);
    }
    _results = [];
    for (level in messages) {
      if (!levels[level]) {
        continue;
      }
      _results.push(this[level](messages[level]));
    }
    return _results;
  };

  Logger.prototype.process = function(args) {
    var key, message;
    if (typeof args[0] === 'string') {
      return [args[0], args[1]];
    }
    message = args[0]();
    if (typeof message === 'string') {
      return [message];
    } else if (message instanceof Array) {
      return message;
    } else {
      for (key in message) {
        return [key, message[key]];
      }
    }
  };

  Logger.prototype.loadLevels = function(level) {
    var active, _level, _results;
    active = false;
    _results = [];
    for (_level in this.levels) {
      if (level === _level) {
        active = true;
      }
      _results.push(this.levels[_level] = active);
    }
    return _results;
  };

  return Logger;

})();

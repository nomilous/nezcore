// Generated by CoffeeScript 1.4.0
var Logger, logger, winston;

winston = require('winston');

logger = void 0;

module.exports = Logger = (function() {

  function Logger(opts) {
    var transports;
    if (opts == null) {
      opts = {};
    }
    this._levels = {
      silly: false,
      verbose: false,
      info: false,
      warn: false,
      debug: false,
      error: true
    };
    transports = [];
    if (typeof opts.console !== 'undefined') {
      this.loadLevels(opts.console.level);
      transports.push(new winston.transports.Console({
        level: opts.console.level,
        colorize: opts.console.colorize
      }));
    }
    if (typeof opts.file !== 'undefined') {
      this.loadLevels(opts.file.level);
      transports.push(new winston.transports.File({
        filename: opts.file.filename,
        level: opts.file.level
      }));
    }
    this.logger = new winston.Logger({
      transports: transports
    });
  }

  Logger.prototype.silly = function(message) {
    return this.logger.silly.apply(null, this.process(message()));
  };

  Logger.prototype.verbose = function(message) {
    return this.logger.verbose.apply(null, this.process(message()));
  };

  Logger.prototype.info = function(message) {
    return this.logger.info.apply(null, this.process(message()));
  };

  Logger.prototype.warn = function(message) {
    return this.logger.warn.apply(null, this.process(message()));
  };

  Logger.prototype.debug = function(message) {
    return this.logger.debug.apply(null, this.process(message()));
  };

  Logger.prototype.error = function(message) {
    return this.logger.error.apply(null, this.process(message()));
  };

  Logger.prototype.process = function(message) {
    var key;
    if (typeof message === 'string') {
      return [message];
    } else if (message instanceof Object) {
      for (key in message) {
        return [key, message];
      }
    }
  };

  Logger.prototype.loadLevels = function(level) {
    var active, _level, _results;
    active = false;
    _results = [];
    for (_level in this._levels) {
      if (level === _level) {
        active = true;
      }
      _results.push(this._levels[_level] = active);
    }
    return _results;
  };

  return Logger;

})();

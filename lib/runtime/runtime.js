// Generated by CoffeeScript 1.4.0
var Runtime, commander, winston;

commander = require('commander');

winston = require('winston');

commander.option('-s, --silent', 'suppresses console output');

commander.option('-v, --verbose', 'amplify console output');

commander.option('    --log-level [level]', 'set console log level (defualt: info)');

commander.option('    --log-file [file]', 'log to file');

commander.option('    --log-file-level [level]', 'set file log level (defualt: info)');

commander.option('\nDownlink Config', '');

commander.option('To listen for remote realizers or sub-objectives.\n', '');

commander.option('   --adaptor [adaptor]', 'listen with adaptor (default socket.io)');

commander.option('   --iface [iface]', 'listen on iface (default 127.0.01)');

commander.option('   --port [port]', 'listen on port (default any)');

commander.option('\nUplink Config', '');

commander.option('Attach to super-objective\n', '');

commander.option('   --uplink-adaptor [adaptor]', 'connect with adaptor (default socket.io)');

commander.option('   --uplink-uri [uri]', 'connect to uri (http://localhost:10101)');

Runtime = (function() {

  function Runtime() {
    commander.parse(process.argv);
    this.loadLogger();
    this.loadListen();
    this.logger.verbose('starting runtime');
    this.logger.verbose('pending listen', this.listen);
    this.logger.verbose('pending connect', this.connect);
  }

  Runtime.prototype.loadListen = function() {
    this.listen = {
      adaptor: commander.adaptor || process.env.LISTEN_ADAPTOR || 'socket.io',
      iface: commander.iface || process.env.LISTEN_IFACE || '127.0.0.1',
      port: commander.port || process.env.LISTEN_PORT || null
    };
    return this.connect = {
      adaptor: commander.uplinkAdaptor || process.env.UPLINK_ADAPTOR || 'socket.io',
      uri: commander.uplinkUri || process.env.UPLINK_URI || 'http://localhost:10101'
    };
  };

  Runtime.prototype.loadLogger = function() {
    var logFile, logFileLevel, logLevel, transports;
    logFileLevel = commander.logFileLevel || process.env.LOG_LEVEL || 'info';
    logFile = commander.logFile || process.env.LOG_FILE;
    logLevel = commander.logLevel || process.env.LOG_LEVEL || 'info';
    if (commander.verbose) {
      logLevel = 'verbose';
    }
    transports = [];
    if (!(commander.silent && !commander.verbose)) {
      transports.push(new winston.transports.Console({
        level: logLevel,
        colorize: true
      }));
    }
    if (commander.logFile) {
      transports.push(new winston.transports.File({
        filename: commander.logFile,
        level: logFileLevel
      }));
    }
    return this.logger = new winston.Logger({
      transports: transports
    });
  };

  return Runtime;

})();

module.exports = Runtime;

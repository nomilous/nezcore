// Generated by CoffeeScript 1.4.0
var Logger, Runtime, commander;

commander = require('commander');

Logger = require('../logger/logger');

commander.option('-s, --silent', 'suppresses console output');

commander.option('-v, --verbose', 'amplify console output');

commander.option('    --log-level [level]', 'set console log level (defualt: info)');

commander.option('    --log-file [file]', 'log to file');

commander.option('    --log-file-level [level]', 'set file log level (defualt: info)');

commander.option('\nDownlink Config\n', '');

commander.option('   --adaptor [adaptor]', 'listen with adaptor (default socket.io)');

commander.option('   --iface [iface]', 'listen on iface (default 127.0.01)');

commander.option('   --port [port]', 'listen on port (default any)');

commander.option('\nUplink Config\n', '');

commander.option('   --uplink-adaptor [adaptor]', 'connect with adaptor (default socket.io)');

commander.option('   --uplink-uri [uri]', 'connect to uri (http://localhost:10101)');

Runtime = (function() {

  function Runtime() {
    commander.parse(process.argv);
    this.loadLogger(commander);
    this.loadListen();
    this.loadConnect();
    this.logger.verbose('starting runtime');
    this.logger.verbose('pending listen', this.listen);
    this.logger.verbose('pending connect', this.connect);
  }

  Runtime.prototype.loadListen = function() {
    return this.listen = {
      adaptor: commander.adaptor || process.env.LISTEN_ADAPTOR || 'socket.io',
      iface: commander.iface || process.env.LISTEN_IFACE || '127.0.0.1',
      port: commander.port || process.env.LISTEN_PORT || null
    };
  };

  Runtime.prototype.loadConnect = function() {
    return this.connect = {
      adaptor: commander.uplinkAdaptor || process.env.UPLINK_ADAPTOR || 'socket.io',
      uri: commander.uplinkUri || process.env.UPLINK_URI || 'http://localhost:10101'
    };
  };

  Runtime.prototype.loadLogger = function(commander) {
    var consoleLevel, level, opts;
    opts = {};
    level = commander.logLevel || process.env.LOG_LEVEL || 'info';
    if (!(commander.silent && !commander.verbose)) {
      consoleLevel = level;
      if (commander.verbose) {
        consoleLevel = 'verbose';
      }
      opts.console = {
        level: consoleLevel,
        colorize: true
      };
    }
    if (commander.logFile) {
      opts.file = {
        level: level,
        filename: commander.logFile
      };
    }
    return this.logger = new Logger(opts);
  };

  return Runtime;

})();

module.exports = Runtime;

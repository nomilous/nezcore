// Generated by CoffeeScript 1.6.3
var PhraseInjector, PhraseLeafDetect, inject, util, _ref;

_ref = require('also'), inject = _ref.inject, util = _ref.util;

PhraseLeafDetect = require('./phrase_leaf_detect');

PhraseInjector = require('./phrase_injector');

module.exports = {
  create: function(context, notice, rootFn) {
    var phraseStacker, stack;
    stack = [];
    context.isLeaf || (context.isLeaf = PhraseLeafDetect["default"]);
    context.global || (context.global = false);
    phraseStacker = function(elementName, control) {
      var injectionContext, injectionControl, injectionFunction;
      injectionContext = {
        elementName: elementName,
        context: context,
        stack: stack
      };
      injectionControl = {
        parallel: false,
        timeout: control.timeout || 0,
        beforeAll: PhraseInjector.beforeAll(injectionContext, control),
        beforeEach: PhraseInjector.beforeEach(injectionContext, control),
        afterEach: PhraseInjector.afterEach(injectionContext, control),
        afterAll: PhraseInjector.afterAll(injectionContext, control),
        onError: function(error) {
          return console.log(error.stack);
        },
        onTimeout: PhraseInjector.onTimeout(injectionContext, control)
      };
      injectionFunction = inject.async(injectionControl, function(phrase, nestedControl, fn) {
        var childElementName;
        childElementName = util.argsOf(fn)[0];
        return fn(phraseStacker(childElementName, nestedControl));
      });
      Object.defineProperty(injectionFunction, 'stack', {
        get: function() {
          return stack;
        },
        enumerable: false
      });
      Object.defineProperty(injectionFunction, 'top', {
        get: function() {
          return stack[stack.length - 1];
        },
        enumerable: false
      });
      return injectionFunction;
    };
    return phraseStacker(util.argsOf(rootFn)[0], context);
  }
};

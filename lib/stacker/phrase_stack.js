// Generated by CoffeeScript 1.6.3
var PhraseInjector, PhraseLeafDetect, argsOf, async, defer, sequence;

argsOf = require('also').util.argsOf;

async = require('also').inject.async;

defer = require('when').defer;

sequence = require('when/sequence');

PhraseLeafDetect = require('./phrase_leaf_detect');

PhraseInjector = require('./phrase_injector');

module.exports = {
  create: function(context, notice, realizerFn) {
    var stack, stacker;
    stack = [];
    context.isLeaf || (context.isLeaf = PhraseLeafDetect["default"]);
    stacker = function(elementName, control) {
      var injectionConfig, injectionFunction;
      injectionConfig = {
        elementName: elementName,
        context: context,
        stack: stack
      };
      injectionFunction = async({
        parallel: false,
        timeout: control.timeout || 0,
        onError: function(error) {
          return console.log(error.stack);
        },
        onTimeout: function(done, detail, inject) {
          if (context.handler != null) {
            if (typeof context.handler.onTimeout === 'function') {
              return context.handler.onTimeout(done, detail, pushFn);
            }
          }
          return done();
        },
        beforeAll: PhraseInjector.beforeAll(injectionConfig, control),
        beforeEach: PhraseInjector.beforeEach(injectionConfig, control),
        afterEach: PhraseInjector.afterEach(injectionConfig, control),
        afterAll: PhraseInjector.afterAll(injectionConfig, control)
      }, function(phrase, nestedControl, fn) {
        var childElementName;
        childElementName = argsOf(fn)[0];
        nestedControl.leafOnly = control.leafOnly;
        return fn(stacker(childElementName, nestedControl));
      });
      Object.defineProperty(injectionFunction, 'stack', {
        get: function() {
          return stack;
        },
        enumerable: false
      });
      Object.defineProperty(injectionFunction, 'top', {
        get: function() {
          return stack[stack.length - 1];
        },
        enumerable: false
      });
      return injectionFunction;
    };
    return stacker(argsOf(realizerFn)[0], context);
  }
};

// Generated by CoffeeScript 1.4.0
var coffee, colors, compiler, fs, inflection, path, wrench;

fs = require('fs');

path = require('path');

wrench = require('wrench');

coffee = require('coffee-script');

colors = require('colors');

inflection = require('inflection');

module.exports = compiler = {
  compile: function(logger, config, callback) {
    var file, inFile, js, outFile, outPath, source;
    inFile = config.file;
    outFile = config.file.replace(config.src, '');
    outPath = config.dst + outFile;
    try {
      source = fs.readFileSync(inFile).toString();
      js = coffee.compile(source, {
        bare: true,
        header: true
      });
      wrench.mkdirSyncRecursive(path.dirname(outPath), '0755');
      file = outPath.replace(/\.coffee$/, '.js');
      fs.writeFileSync(file, js);
      return callback(null);
    } catch (error) {
      if (error.toString().match(/SyntaxError/)) {
        compiler.showError(config.src, outFile, source, error);
      }
      return callback(error);
    }
  },
  ensureSpec: function(logger, config, callback) {
    var basename, classname, create, file, outFile, specFile;
    create = false;
    outFile = config.file.replace(config.src, '');
    specFile = outFile.replace(/\.coffee$/, '_spec.coffee');
    file = config.spec + specFile;
    try {
      fs.lstatSync(file);
      callback(null, file);
      return;
    } catch (error) {
      if (error.code !== 'ENOENT') {
        throw error;
      }
    }
    try {
      basename = path.basename(config.file).replace(/\.coffee$/, '');
      classname = inflection.camelize(basename);
      wrench.mkdirSyncRecursive(path.dirname(file), '0755');
      fs.writeFileSync(file, "require('nez').realize '" + classname + "', (context, test, " + classname + ") -> \n\n    context 'in CONTEXT', (it) ->\n\n        it 'does an EXPECTATION', (done) ->\n\n            test done\n");
      callback(null);
    } catch (error) {
      callback(error);
    }
  },
  showError: function(path, file, source, error) {
    var end, first_line, last_line, line, lines, num, start, _i;
    first_line = error.location.first_line;
    last_line = error.location.last_line;
    lines = source.split('\n');
    start = first_line - 5;
    if (start < 0) {
      start = 0;
    }
    end = last_line + 5;
    if (end > lines.length - 1) {
      end = lines.length - 1;
    }
    console.log('\nFile:', path + file.bold);
    console.log('SyntaxError:', error.message.bold.red, '\n');
    for (num = _i = start; start <= end ? _i <= end : _i >= end; num = start <= end ? ++_i : --_i) {
      line = "" + num + "  " + lines[num];
      if (num >= first_line && num <= last_line) {
        console.log(line.red);
      } else {
        console.log(line);
      }
    }
    return console.log('\n');
  }
};

// Generated by CoffeeScript 1.4.0
var EventEmitter;

EventEmitter = require('events').EventEmitter;

exports.fn = {
  parser: function() {
    var emitter, recurse, stack;
    emitter = new EventEmitter;
    stack = [];
    emitter.parse = recurse = function(jsString) {
      var char, curlyDepth, fn, match, remaining, statement, vars, _i, _len;
      if (match = jsString.match(/function\s*\((.*)\)\s*{/)) {
        fn = {
          signature: match[1].replace(/[\s]/g, '').split(','),
          variables: [],
          statements: [],
          body: ''
        };
        remaining = jsString.substring(match.index + match[0].length);
        curlyDepth = 0;
        statement = '';
        for (_i = 0, _len = remaining.length; _i < _len; _i++) {
          char = remaining[_i];
          if (char === '{') {
            curlyDepth++;
          } else if (char === '}') {
            curlyDepth--;
          }
          if (curlyDepth >= 0) {
            fn.body += char;
          }
          if (curlyDepth === 0) {
            if (char === ';') {
              statement = statement.replace(/^[\s]+/g, '');
              statement = statement.replace(/[\s]+$/g, '');
              if (vars = statement.match(/^var\s(.*)/)) {
                vars[1].split(',').map(function(variable) {
                  return fn.variables.push(variable.replace(/^[\s]+/g, ''));
                });
              } else {
                fn.statements.push(statement);
              }
              statement = '';
            } else {
              if (char !== '}') {
                statement += char;
              }
            }
          }
          if (curlyDepth < 0) {
            fn.body = fn.body.replace(/^[\s]+/g, '');
            fn.body = fn.body.replace(/[\s]+$/g, '');
            break;
          }
        }
        if (fn.signature[0] === '') {
          fn.signature = [];
        }
        stack.push(fn);
        if (fn.body.match(/function\s*\(/)) {
          recurse(fn.body);
        } else {
          emitter.emit('closure', JSON.parse(JSON.stringify(stack)));
        }
        stack.pop();
        remaining = remaining.substring(fn.body.length);
        return recurse(remaining);
      } else {
        if (stack.length === 0) {
          return emitter.emit('end');
        }
      }
    };
    return emitter;
  }
};
